{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ModOAP_Telechargement_documents_Gallica.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hQ2QjFUXJpMz"
      },
      "source": [
        "# Script de téléchargement de documents sur Gallica\n",
        "\n",
        "Ce carnet permet de télécharger les pages de documents Gallica au format JPG, ou l'ensemble des documents aux formats PDF ou TXT, à partir des identifiants ark des documents. \n",
        "\n",
        "Les identifiants ark des docs à télécharger doivent être listés dans une colonne d'un fichier .xlsx présent sur le drive. \n",
        "Le dossier exemple_liste_identifiants contient un exemple de fichier .xlsx listant 5 documents Gallica.\n",
        "\n",
        "Téléchargement des pages des documents au format JPG ou de l'ensemble du document au format PDF ou TXT.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "11aEGN4-80Vp",
        "cellView": "form"
      },
      "source": [
        "#@title ##  Préparation et synchronisation d'un Google Drive\n",
        "\n",
        "#@markdown ##### Lancer cette cellule et cliquer sur le lien généré pour entrer un code de vérification si demandé.\n",
        "try :\n",
        "    import xmltodict\n",
        "except ModuleNotFoundError :\n",
        "    !pip install xmltodict\n",
        "import shutil\n",
        "import requests\n",
        "import xmltodict\n",
        "from bs4 import BeautifulSoup\n",
        "from openpyxl import load_workbook\n",
        "import urllib.request, urllib.error, urllib.parse\n",
        "from urllib.error import HTTPError, URLError\n",
        "from xml.etree import ElementTree as ET\n",
        "from google.colab import drive\n",
        "import os\n",
        "import json\n",
        "from tqdm import tqdm\n",
        "import re\n",
        "import unicodedata\n",
        "import requests\n",
        "import xmltodict\n",
        "\n",
        "# chargement d'un google drive\n",
        "if not os.path.exists(\"/content/drive/MyDrive/\") :\n",
        "    drive.mount('/content/drive/')\n",
        "\n",
        "\n",
        "# définition des fonctions\n",
        "def paginationDL(ark):\n",
        "    try :\n",
        "        PAGINATION_BASEURL = 'https://gallica.bnf.fr/services/Pagination?ark='\n",
        "        url = \"\".join([PAGINATION_BASEURL, ark])\n",
        "        s = requests.get(url, stream=True)\n",
        "        pagination = str(BeautifulSoup(s.content,\"lxml-xml\"))\n",
        "        paginationdic = xmltodict.parse(pagination)\n",
        "        nb_pages = int(paginationdic[\"livre\"][\"structure\"][\"nbVueImages\"])\n",
        "        #with open(\"pagination_\"+str(ark), \"w\") as pagout :\n",
        "         #   pagout.write(pagination)\n",
        "        return paginationdic, nb_pages\n",
        "    except :\n",
        "        print(\"la pagination n'a pas été téléchargée\")\n",
        "        \n",
        "\n",
        "def altoDL(ark,page, ordre, numero):\n",
        "    \n",
        "    OCR_BASEURL = 'https://gallica.bnf.fr/RequestDigitalElement?O='\n",
        "    url = \"\".join([OCR_BASEURL, ark, '&E=ALTO&Deb=', str(page)])\n",
        "    s = requests.get(url, stream=True)\n",
        "    alto = str(BeautifulSoup(s.content,\"lxml-xml\"))\n",
        "    with open(\"view_\"+str(ordre)+\"_num_\"+str(numero)+\"_alto.xml\", \"w\") as altout :\n",
        "        altout.write(alto)\n",
        "    if len(alto) < 40 :\n",
        "        return \"no\"\n",
        "    else :\n",
        "        return \"yes\"\n",
        "\n",
        "def nb_pages(manifeste) : \n",
        "    with open(manifeste) as f:\n",
        "        dico = json.load(f)\n",
        "    nb_pages = len(dico[\"sequences\"][0][\"canvases\"])\n",
        "    return nb_pages\n",
        "\n",
        "def manifesteDL(ark):\n",
        "    try :\n",
        "        url = \"https://gallica.bnf.fr/iiif/ark:/12148/\"+str(ark)+\"/manifest.json\"\n",
        "        nom_fichier = ark+\"-manifest.json\"\n",
        "        urllib.request.urlretrieve(url, nom_fichier)\n",
        "        return nom_fichier\n",
        "    except :\n",
        "        print(\"Le manifeste n'a pas pu être téléchargé\")\n",
        "\n",
        "def pageDL(ark, page, numero_page, numero_phys, region=\"full\", size=\"full\", rotation=\"0\", quality=\"native\", format=\"jpg\"):\n",
        "    IIIF_BASEURL = 'https://gallica.bnf.fr/iiif/ark:/12148/'\n",
        "    url = \"\".join([IIIF_BASEURL, ark, '/f', str(page), '/', region, '/', size, '/', rotation, '/', quality, '.', format])\n",
        "    nom_fichier = get_title(ark)+\"_\"+\"view_\"+str(ordre)+\"_num_\"+str(numero)+\".jpg\"\n",
        "    try :\n",
        "        urllib.request.urlretrieve(url, nom_fichier)\n",
        "        return \"ok\"\n",
        "    except (HTTPError, URLError) as erreur:\n",
        "        return str(erreur.reason)        \n",
        "\n",
        "def bnf2gall(arkbnf):\n",
        "    url = \"https://catalogue.bnf.fr/ark:/12148/\"+str(arkbnf)\n",
        "    s = requests.get(url, stream=True)\n",
        "    html = BeautifulSoup(s.content,\"lxml-xml\")\n",
        "    for link in html.findAll('a', {'class': 'exemplaire-action-visualiser'}):\n",
        "        ark = link['href'].split(\"/\")[-1]\n",
        "        return ark\n",
        "\n",
        "def remove_accents(s):\n",
        "  return ''.join((c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn'))\n",
        "\n",
        "def normalisation_titre(titre):\n",
        "  titre = remove_accents(titre)\n",
        "  titre = re.sub('[^a-zA-Z0-9- ]', '', titre)\n",
        "  titre = re.sub('[ ]', '_', titre)\n",
        "  return \"_\".join(titre.split(\"_\")[:6])\n",
        "\n",
        "def get_title(ark):\n",
        "  url_biblio = \"https://gallica.bnf.fr/services/OAIRecord?ark=\"+ark\n",
        "  s = requests.get(url_biblio, stream=True)\n",
        "  bibliodico = xmltodict.parse(s.text)\n",
        "  try :\n",
        "    titre = bibliodico[\"results\"][\"title\"]\n",
        "    titre = normalisation_titre(titre)\n",
        "  except :\n",
        "    titre = ark\n",
        "  return titre\n",
        "\n",
        "def page_courante(ark, page, pagination):\n",
        "    ordre = pagination[\"livre\"][\"pages\"][\"page\"][int(page-1)][\"ordre\"]\n",
        "    numero = pagination[\"livre\"][\"pages\"][\"page\"][int(page-1)][\"numero\"]\n",
        "    return ordre, numero\n",
        "\n",
        "def pdfDL(ark,titre):\n",
        "  try :\n",
        "    url = \"https://gallica.bnf.fr/ark:/12148/\"+str(ark)+\".pdf\"\n",
        "    nom_fichier = ark+\"_\"+titre+\".pdf\"\n",
        "    urllib.request.urlretrieve(url, nom_fichier)\n",
        "  except :\n",
        "    print(\"Le pdf n'a pas pu être téléchargé\")\n",
        "\n",
        "def txtDL(ark, nb_pages, titre):\n",
        "  try :\n",
        "    url = \"https://gallica.bnf.fr/ark:/12148/\"+str(ark)+\"/f1n\"+str(nb_pages)+\".texteBrut\"\n",
        "    nom_fichier = ark+\"_\"+titre+\".txt\"\n",
        "    page = urllib.request.urlopen(url).read().decode('utf-8')\n",
        "    page = str(page)\n",
        "    soup = BeautifulSoup(page, \"html.parser\")\n",
        "    p_tags = soup.find_all(\"p\")\n",
        "    with open(nom_fichier, 'w') as f:\n",
        "      for tag in p_tags:\n",
        "        f.write(str(tag.text)+'\\n')\n",
        "  except :\n",
        "    print(\"Le texte du document {} n'a pas pu être téléchargé\".format(ark))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0df0QwGS9OW5",
        "cellView": "form"
      },
      "source": [
        "# Récupération des liens depuis le fichier xls\n",
        "\n",
        "#@markdown ### Téléchargement des pages de documents\n",
        "\n",
        "#@markdown Entrez le chemin du fichier xls :\n",
        "chemin_fichier_xls = \"\" #@param {type:\"string\"}\n",
        "\n",
        "#@markdown Possibilité de copier/coller le chemin depuis la fenêtre de gauche : onglet \"Fichiers\" -> clic droit sur un dossier -> \"Copier le chemin\"\n",
        "\n",
        "#@markdown Exemple de chemin:\n",
        "#@markdown /content/drive/My Drive/fichiers/\n",
        "\n",
        "#@markdown ---\n",
        "\n",
        "#@markdown ### Entrez l'indice de la colonne contenant les liens ARK :\n",
        "colonne_ark = \"A\" #@param {type:\"string\"}\n",
        "#@markdown Exemple d'indice : A\n",
        "\n",
        "#@markdown ---\n",
        "\n",
        "\n",
        "#@markdown ### Entrez le répertoire de destination où télécharger les documents :\n",
        "chemin_destination = \"\" #@param {type:\"string\"}\n",
        "#@markdown Exemple de chemin:\n",
        "#@markdown /content/drive/My Drive/datasets/\n",
        "\n",
        "#@markdown ---\n",
        "\n",
        "#@markdown #### Choisir le format de téléchargement :\n",
        "format_telechargement = \"jpg\" #@param [\"jpg\", \"txt\", \"pdf\"]\n",
        "#@markdown  Télécharge un fichier par page au format jpg et un fichier pour l'ensemble du document autrement\n",
        "\n",
        "\n",
        "#@markdown ---\n",
        "#@markdown ### Taille des images à télécharger en pourcentage de l'original :\n",
        "\n",
        "#@markdown (Si format jpg, ignorer autrement)\n",
        "\n",
        "taille_images = 100 #@param {type:\"slider\", min:0, max:100, step:10}\n",
        "if taille_images == 100 :\n",
        "  taille_images = \"full\"\n",
        "else :\n",
        "  taille_images = \"pct:\"+str(taille_images)\n",
        "\n",
        "\n",
        "chemin_classeur = chemin_fichier_xls\n",
        "\n",
        "try :\n",
        "  if not os.path.exists(chemin_destination):\n",
        "      os.makedirs(chemin_destination)\n",
        "except :\n",
        "  print(\"Le chemin de destination est incorrect\")\n",
        "\n",
        "arks = []\n",
        "\n",
        "# Chargement du fichier xls\n",
        "try :\n",
        "  classeur= load_workbook(chemin_classeur)\n",
        "except :\n",
        "  print(\"Le fichier xls n'a pas été chargé correctement\")\n",
        "\n",
        "# Récupération des liens ARK\n",
        "for onglet in classeur.sheetnames:\n",
        "    onglet_courant = classeur[onglet]\n",
        "    colonne = onglet_courant[colonne_ark]\n",
        "    for cellule in colonne :\n",
        "        if str(cellule.value).startswith(\"http\") or str(cellule.value).startswith(\"ark\") or str(cellule.value).startswith(\"b\") or str(cellule.value).startswith(\"cb\")  :\n",
        "            arks.append(str(cellule.value))\n",
        "\n",
        "arks = set(arks)\n",
        "print(\"{0} liens distincts récupérés dans {1} onglets\".format(len(arks), len(classeur.sheetnames)))\n",
        "\n",
        "# Tri des liens Gallica\n",
        "arks_gallica = []\n",
        "arks_autres_serveurs = []\n",
        "\n",
        "for ark in arks :\n",
        "  if ark.startswith(\"b\") or ark.startswith(\"cb\") :\n",
        "    ark2 = ark\n",
        "  else :   \n",
        "    ark2 = ark.split(\"/\")[-1].strip()\n",
        "  if \"?\" in ark2 :\n",
        "    ark2 = str(ark2.split(\"?\")[0])\n",
        "  if ark2.endswith(\"item\") :\n",
        "    ark2 = ark.split(\"/\")[-2]\n",
        "  if ark2.startswith(\"b\") :\n",
        "    arks_gallica.append(ark2)\n",
        "  elif ark2.startswith(\"c\") :\n",
        "    ark2 = bnf2gall(ark2)\n",
        "    arks_gallica.append(ark2)\n",
        "  else : \n",
        "    arks_autres_serveurs.append(ark2)\n",
        "\n",
        "print(\"{0} liens Gallica et {1} sur d'autres serveurs\".format(len(arks_gallica), len(arks_autres_serveurs)))\n",
        "\n",
        "%cd $chemin_destination\n",
        "\n",
        "erreurs_500 = []\n",
        "sans_ocr = []\n",
        "\n",
        "if len(arks_gallica) > 0 :\n",
        "  for ark in arks_gallica :\n",
        "    #try :\n",
        "    print(\"Identifiant du document : \", ark)\n",
        "    if not os.path.exists(get_title(ark)):\n",
        "      os.makedirs(get_title(ark))\n",
        "    os.chdir(get_title(ark))\n",
        "    # Téléchargement du fichier de pagination\n",
        "    pagination, nb_pages = paginationDL(ark)\n",
        "\n",
        "    if format_telechargement == \"jpg\" :\n",
        "      print(\"Nombre de pages : \", str(nb_pages))\n",
        "      for page in tqdm(range(nb_pages)) :\n",
        "        page += 1\n",
        "        #print(\"Page {0}/{1}\".format(str(page), str(nb_pages)))\n",
        "        ordre, numero = page_courante(ark, page, pagination)\n",
        "        # Téléchargement de l'image de la page'\n",
        "        reponse_doc = pageDL(ark, page, ordre, numero, size = taille_images)\n",
        "        if reponse_doc == \"ok\" :\n",
        "          pass\n",
        "        if reponse_doc == \"500\" :\n",
        "          erreurs_500.append(ark)\n",
        "          print(\"erreur 500\")\n",
        "          break\n",
        "        else : pass \n",
        "    elif format_telechargement == \"txt\" :\n",
        "      txtDL(ark, nb_pages, get_title(ark))\n",
        "\n",
        "    elif format_telechargement == \"pdf\" :\n",
        "      pdfDL(ark,get_title(ark))\n",
        "\n",
        "    #except :\n",
        "     # print(\"Problème avec le document\")\n",
        "     # continue\n",
        "        \n",
        "    os.chdir(\"../\")\n",
        "\n",
        "erreurs_500 = set(erreurs_500)\n",
        "with open(\"erreurs_500.txt\", \"w\") as err :\n",
        "  err.write(\"=============================\")\n",
        "  err.write(\"Erreurs 500 : \")\n",
        "  err.write(\"=============================\")\n",
        "  for ark in erreurs_500 :\n",
        "    err.write(ark)\n",
        "    err.write(\"\\n\")\n",
        "  err.write(\"=============================\")\n",
        "  err.write(\"Documents non-océrisés : \")\n",
        "  err.write(\"=============================\")\n",
        "  for ocrless in sans_ocr :\n",
        "    err.write(ocrless)\n",
        "  \n",
        "  \n",
        "print(\"Documents non téléchargés (erreur 500) : {0}\".format(len(erreurs_500)))\n",
        "print(\"Ces documents sont listés dans le fichier erreurs_500.txt\")"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
